substitutions:
  device_ssid: "Template 1"
  device_name: template1
  device_description: "Lumary 18W RGBCW Slim Downlight - ESP8285"
  friendly_name: "Template1"    # Put the name that you want to see in Home Assistant.
  friendly_name_rgb: "Template 1 RGB"    # Put the name that you want to see in Home Assistant.
  main_device_id: "template1"    # Put the name that you want to see in Home Assistant.
  rgb_device_id: "templater1gb" # Put the name that you want to see in Home Assistant.
  project_name: "lumary.18w-rgbcw-slim-downlight-esp8285"
  project_version: "1.0"


esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP8266
  board: modwifi
  project:
    name: "${project_name}"
    version: "${project_version}"
  # platformio_options:
  #   board_build.flash_mode: dio
  # platform: ESP32
  # board: esp32dev

# esp32:
#   board: esp32-c3-devkitm-1
#   framework:
#     # type: arduino
#     # version: 2.0.2
#     # platform_version: 4.3.0
#   # framework:
#     type: esp-idf

wifi:
    ssid: !secret wifi_all_ssid
    password: !secret wifi_all_password
    # use_address: masterbedroom1test.local

    # Enable fallback hotspot (captive portal) in case wifi connection fails
    ap:
      ssid: ${device_ssid}
      password: !secret ap_password

captive_portal:

# Enable logging
# Example configuration entry
debug:

# Logger must be at least debug (default)
logger:
  level: DEBUG
    # baud_rate: 0
  
# uart:
#   rx_pin: GPIO21
#   tx_pin: GPIO20
#   # baud_rate: 9600
#   baud_rate: 115200
#   stop_bits: 1
#   debug:
#     direction: BOTH

# Register the Tuya MCU connection
# tuya:

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  safe_mode: true
  password: !secret ota_password

web_server:
  port: 80

# Sensors with general information.
sensor:
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: uptime_sensor
  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${friendly_name} Signal strength
    update_interval: 60s
    internal: true
    
text_sensor:
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP
    ssid:
      name: ${friendly_name} SSID
    bssid:
      name: ${friendly_name} BSSID
#  - platform: template
#    name: Uptime Human Readable
#    id: uptime_human
#    icon: mdi:clock-start
    
switch:
    # this provides fr a possibility to restart from the web console or Home automation should we ever need it
  - platform: restart
    name: "Restart"

output:
  - platform: esp8266_pwm
    id: output_red
    pin: GPIO5
    # max_power: 100%
    # frequency: ${frequency_rgb}
  - platform: esp8266_pwm
    id: output_green
    pin: GPIO4
    # max_power: 100%
    # frequency: ${frequency_rgb}
  - platform: esp8266_pwm
    id: output_blue
    pin: GPIO13
    # max_power: 100%
    # frequency: ${frequency_rgb}
  - platform: esp8266_pwm
    id: output_cold_white
    max_power: 100%
    # frequency: ${frequency_cw}
    pin: GPIO14
  - platform: esp8266_pwm
    id: output_warm_white
    pin: GPIO12
    max_power: 100%
    # frequency: ${frequency_ww}

light:
  - platform: cwww
    name: ${friendly_name}
    id: ${main_device_id}
    cold_white: output_cold_white
    warm_white: output_warm_white
    cold_white_color_temperature: 6536 K
    warm_white_color_temperature: 2000 K
    constant_brightness: false
    gamma_correct: 0
    default_transition_length: 1s
  - platform: rgb
    name: ${friendly_name_rgb}
    id: ${rgb_device_id}
    red: output_red
    green: output_green
    blue: output_blue
    default_transition_length: 0.5s
    restore_mode: RESTORE_DEFAULT_OFF