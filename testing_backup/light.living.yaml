substitutions:
  name: livingroomlight
  device_ssid: "Living Light"
  device_description: "Ceiling LED light with IR remote located in Ashish Room with discreet Tunable White & RGB Front Light (shows up as separate lights)."
  friendly_name: "Living Room Light"    # Put the name that you want to see in Home Assistant.
  device_id_white: livingroomlightwhite    # Put the name that you want to see in Home Assistant.
  device_name_white: "Living Room Light White"
  device_id_rgb: livingroomlightrgb    # Put the name that you want to see in Home Assistant.
  device_name_rgb: "Living Room Light RGB"
  switch1b1_topic: livingswitch/button/1/command
  switch1b2_topic: livingswitch/button/2/command
  switch1b3_topic: livingswitch/button/3/command
  switch1b4_topic: livingswitch/button/4/command
  frequency_rgb: 250 Hz
  frequency_cw: 1000 Hz
  frequency_ww: 1000 Hz
  project_name: "offdarks.lxd-xg68-68w-rgbcw-ceiling-esp32-arduino"
  project_version: "1.0"

# Enable Home Assistant API
api:
  encryption:
    key: !secret living_noise_key
  reboot_timeout: 0s
  
# Enable logging
# Logger must be at least debug (default)
logger:
  level: debug

ota:
  - platform: esphome
    version: 2
    password: !secret ota_password

safe_mode:

wifi:
    ssid: !secret wifi_all_ssid
    password: !secret wifi_all_password

    # Enable fallback hotspot (captive portal) in case wifi connection fails
    ap:
      ssid: ${device_ssid} Fallback Hotspot
      password: !secret ap_password

network:
    enable_ipv6: true
    min_ipv6_addr_count: 2

# Device Specific Config
esphome:
  name: ${name}
  comment: ${device_description}
  project:
    name: "${project_name}"
    version: "${project_version}"

esp32:
  board: esp32dev
  framework: 
    type: arduino

captive_portal:

web_server:
  port: 80
  auth:
    username: admin
    password: !secret web_server_password
  include_internal: true
  # local: true

output:
  - platform: ledc
    id: output_red
    pin: GPIO5
    # max_power: 100%
    frequency: ${frequency_rgb}
  - platform: ledc
    id: output_green
    pin: GPIO14
    # max_power: 100%
    frequency: ${frequency_rgb}
  - platform: ledc
    id: output_blue
    pin: GPIO16
    # max_power: 100%
    frequency: ${frequency_rgb}
  - platform: ledc
    id: output_cold_white
    max_power: 100%
    frequency: ${frequency_cw}
    pin: GPIO17
  - platform: ledc
    id: output_warm_white
    pin: GPIO18
    max_power: 100%
    frequency: ${frequency_ww}

remote_receiver:
  pin:
    number: GPIO27
    inverted: true
    # mode:
    #   input: true
    #   pulldown: true
      # pullup: true
  # pin: GPIO27
  dump: all
  # Settings to optimize recognition of RF devices
  # tolerance: 50%
  # filter: 250us
  # idle: 4ms
  # buffer_size: 2kb
  # clock_divider: 40
  # rmt_channel: 4

wled:

e131:
  method: multicast # default: register E1.31 to Multicast group

light:
  - platform: cwww
    name: ${device_name_white}
    id: ${device_id_white}
    cold_white: output_cold_white
    warm_white: output_warm_white
    cold_white_color_temperature: 6536 K
    warm_white_color_temperature: 2000 K
    constant_brightness: false
    gamma_correct: 0
    default_transition_length: 1s
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
    - globals.set:
        id: last_light_on
        value: '1'
    icon: "hue:ceiling-aurelle-circle"
  - platform: rgb
    name: ${device_name_rgb}
    id: ${device_id_rgb}
    red: output_red
    green: output_green
    blue: output_blue
    default_transition_length: 0.5s
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
    - globals.set:
        id: last_light_on
        value: '2'
    icon: "hue:ceiling-muscari"
    effects:
      - lambda:
          name: 3 Colour Fade
          update_interval: 0.25s
          lambda: |-
            static int state = 0;
            static int color_fade = 1;
            auto call = id(${device_id_rgb}).turn_on(); //put the id for your light in here
            call.set_transition_length(100);
            if (state == 0) 
            {
            call.set_brightness(0.09);
            
            }
            else if (state == 1)
            {
              switch(color_fade)
              {
                case 1: call.set_rgb(1.0, 0.0, 0.0);
                        break;
                case 2: call.set_rgb(0.0, 1.0, 0.0);
                        break;
                case 3: call.set_rgb(0.0, 0.0, 1.0);
                        break;
              }
              call.set_brightness(1.0);
            }
            state ++;
            if (state == 2){
            state = 0;
            }
            color_fade++;
            if(color_fade == 4)
            {
              color_fade = 1;
            }
            call.perform();
      - random:
          name: smooth
          transition_length: 4s
          update_interval: 5s
      - strobe:
          name: strobe
          colors:
            - state: True
              brightness: 80%
              red: 100%
              green: 90%
              blue: 0%
              white: 0%
              duration: 500ms
            - state: False
              duration: 250ms
            - state: True
              brightness: 80%
              red: 0%
              green: 100%
              blue: 0%
              white: 0%
              duration: 500ms
            - state: False
              duration: 250ms
            - state: True
              brightness: 80%
              red: 0%
              green: 100%
              blue: 60%  
              white: 0%
              duration: 500ms
      - flicker:
          name: flash
          alpha: 95%
          intensity: 1.5%
      - lambda:
          name: fade
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(${device_id_rgb}).turn_on();
            // Transtion of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_rgb(1.0, 1.0, 1.0);
            } else if (state == 1) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (state == 2) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else {
              call.set_rgb(1.0, 0.0, 0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state = 0;
      - lambda:
          name: My Custom Effect
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(${device_id_rgb}).turn_on();
            // Transtion of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_rgb(1.0, 1.0, 1.0);
            } else if (state == 1) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (state == 2) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else {
              call.set_rgb(1.0, 0.0, 0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state = 0;
      - lambda:
          name: My Custom Effect 2
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(${device_id_rgb}).turn_on();
            // Transtion of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_rgb(1.0, 1.0, 1.0);
            } else if (state == 1) {
              call.set_rgb(0.5, 0.0, 1.0);
            } else if (state == 2) {
              call.set_rgb(0.0, 0.5, 1.0);
            } else {
              call.set_rgb(1.0, 0.0, 0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state = 0;
      - lambda:
          name: randomflicker
          update_interval: 200 ms
          lambda: |-
            auto call = id(${device_id_rgb}).turn_on();
            float r = random_float() * 2.0f - 1.0f; 
            r =  r * r * r;
            call.set_transition_length(r);
            //static double br=id(global_brightness);
            call.set_brightness(0.7 + r/10);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: Chill Mode
          update_interval: 70s
          lambda: |-
            auto call = id(${device_id_rgb}).turn_on();
            call.set_transition_length(55000);
            call.set_white(0.0);
            esphome::Color c = esphome::Color::random_color();
            call.set_rgb((c.red%255)/255.0, (c.green%255)/255.0, (c.blue%255)/255.0);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: Chill Mode (Vibrant)
          update_interval: 120s
          lambda: |-
            auto call = id(${device_id_rgb}).turn_on();
            call.set_transition_length(800);
            call.set_white(0.0);
            esphome::Color c = esphome::Color::random_color();
            call.set_rgb((c.red%128)/255.0, (c.green%128)/255.0, (c.blue%128)/255.0);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: Disco
          update_interval: 500ms
          lambda: |-
            auto call = id(${device_id_rgb}).turn_on();
            //call.set_transition_length(rand() % 400 + 1);
            call.set_transition_length(500);
            call.set_white(0.0);
            esphome::Color c = esphome::Color::random_color();
            call.set_rgb((c.red)/255.0, (c.green)/255.0, (c.blue)/255.0);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: WTF
          update_interval: 200ms
          lambda: |-
            auto call = id(${device_id_rgb}).turn_on();
            call.set_transition_length(200);
            call.set_white(0.0);
            call.set_brightness((rand() % 255 + 1) / 255.0);
            call.set_color_temperature(rand() % 2 == 0 ? 0: 512);
            call.perform();
      - strobe:
          name: Lightning
          colors:
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 50ms
            - state: False
              duration: 50ms
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 160ms
            - state: False
              duration: 50ms
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 50ms
            - state: False
              duration: 3000ms
      - random:
          name: "Slow Random Colors"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "Fast Random Colors"
          transition_length: 4s
          update_interval: 5s
      - strobe:
          name: In Alarm
          colors:
            - state: True
              red: 100%
              blue: 0%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 100%
              blue: 0%
              green: 0%
              white: 0%  
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 0%
              blue: 100%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 0%
              blue: 100%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
      - strobe:
          name: Strobe Effect
          colors:
            - state: True
              red: 100%
              green: 90%
              blue: 0%
              white: 0%
              duration: 50ms
            - state: False
              duration: 25ms
            - state: True
              red: 0%
              green: 100%
              blue: 0%
              white: 0%
              duration: 50ms
      - lambda:
          name: Breathing
          update_interval: 16s
          lambda: |-
            static int state = 0;
            static int color = 1;
            auto call = id(${device_id_rgb}).turn_on(); //the id of your light
            call.set_transition_length(15000);
            if (state == 0) 
            {
            call.set_brightness(1.0);
            }
            else if (state == 1)
            {
            call.set_brightness(0.01);
            }
            call.perform();
            state ++;
            if (state == 2){
            state = 0;
            }
      - lambda:
          name: RGB Breathing
          update_interval: 16s
          lambda: |-
            #define Color1 1.0, 0.0, 0.0 //These are the colors defined, feel free to change or extend the list
            #define Color2 1.0, 0.5, 0.0 //if you extend the list, dont forget to add them in the switch loop below
            #define Color3 1.0, 1.0, 0.0 //and remember to adjust the reset counter at the bottom
            #define Color4 0.5, 1.0, 0.0
            #define Color5 0.0, 1.0, 0.0
            #define Color6 0.0, 1.0, 0.5
            #define Color7 0.0, 1.0, 1.0
            #define Color8 0.0, 0.5, 1.0
            #define Color9 0.0, 0.0, 1.0
            #define Color10 0.5, 0.0, 1.0
            #define Color11 0.5, 0.0, 1.0
            #define Color12 1.0, 0.0, 0.5
            static int state = 0;
            static int color = 1;
            auto call = id(${device_id_rgb}).turn_on(); //put the id for your light in here
            call.set_transition_length(15000);
            if (state == 0) 
            {
            call.set_brightness(0.01);
            
            }
            else if (state == 1)
            {
              switch(color)
              {
                case 1: call.set_rgb(Color1);
                        break;
                case 2: call.set_rgb(Color2);
                        break;
                case 3: call.set_rgb(Color3);
                        break;
                case 4: call.set_rgb(Color4);
                        break;
                case 5: call.set_rgb(Color5);
                        break;
                case 6: call.set_rgb(Color6);
                        break;
                case 7: call.set_rgb(Color7);
                        break;
                case 8: call.set_rgb(Color8);
                        break;
                case 9: call.set_rgb(Color9);
                        break;
                case 10: call.set_rgb(Color10);
                          break;
                case 11: call.set_rgb(Color11);
                          break;
                case 12: call.set_rgb(Color12);
                          break;
              }
              call.set_brightness(1.0);
            }
            
            state ++;
            if (state == 2){
            state = 0;
            }
            color++;
            if(color == 7)
            {
              color = 1;
            }
            call.perform();
      - random:          
          name: "Slow Random Effect"
          transition_length: 20s
          update_interval: 20s
      - random:
          name: "Fast Random Effect"
          transition_length: 4s
          update_interval: 5s
      - random:
          name: "Insane Random Effect"
          transition_length: 1s
          update_interval: 1s
      - random:          
          name: "Totally Loco Random Effect"
          transition_length: 300ms
          update_interval: 250ms
      - lambda:
          name: "Random colour fade"
          update_interval: 3s
          lambda: |-
            auto call = id(${device_id_rgb}).turn_on();    
            call.set_red_if_supported(random_float());
            call.set_green_if_supported(random_float());
            call.set_blue_if_supported(random_float());
            call.set_white_if_supported(0.0);
            call.set_transition_length_if_supported(2000);
            call.set_publish(true);
      - lambda:
          name: "Red Green Blue Fade"
          update_interval: 4s
          lambda: |-
            static int state = 0;
            auto call = id(${device_id_rgb}).turn_on();                                                                           
            call.set_transition_length(3000);                                                                      
            if (state == 0) {                                                                             
              call.set_rgb(1.0, 0.0, 0.0);
            } else if (state == 1) {                                                                          
              call.set_rgb(0.0, 1.0, 0.0);
            } else if (state == 2) {                               
              call.set_rgb(0.0, 0.0, 1.0);
            } else {                                                       
              call.set_rgb(1.0, 0.0, 0.0);
            }                             
            call.set_white(0.0);
            call.perform();                                                                        
            state += 1;                                                                                           
            if (state == 3)
              state = 0;
                  
    ## TODO's remote_receiver colour change for rgb light (feature request  #429 esphome needs to support hsv first)
    ## Match Original MagicHome Effects
    
globals:
  - id: last_light_on
    type: int
    restore_value: no
    initial_value: '1'
    
mqtt:
  broker: !secret mqtt_ip
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false
  on_message:
    # Switch 1 - Button 1
    # Short Click - Toggle
    - topic: $switch1b1_topic
      payload: 'SHORT_CLICK'
      qos: 0
      then:
        - light.toggle: ${device_id_white}
    # Hold - Brighten
    - topic: $switch1b1_topic
      payload: 'HOLD'
      qos: 0
      then:
        # Increase the brightness by 5%
        - light.dim_relative:
            id: ${device_id_white}
            relative_brightness: 5%
            transition_length: 0.1s
        - delay: 0.1s
    # Double Click - Increase Colour Temperature
    - topic: $switch1b1_topic
      payload: 'DOUBLE_CLICK'
      qos: 0
      then:
        - lambda: |-
            float current_temp = id(${device_id_white}).current_values.get_color_temperature();
            auto call = id(${device_id_white}).turn_on();
            call.set_color_temperature(current_temp + 25);
            call.set_transition_length(1000); // in ms
            call.perform();
    # Switch 1 - Button 2
    # Short Click - Toggle
    - topic: $switch1b2_topic
      payload: 'SHORT_CLICK'
      qos: 0
      then:
        - light.toggle: ${device_id_white}
    # Hold - Dim
    - topic: $switch1b2_topic
      payload: 'HOLD'
      qos: 0
      then:
        # Decreases the brightness by 5%
        - light.dim_relative:
            id: ${device_id_white}
            relative_brightness: -5%
            transition_length: 0.1s
        - delay: 0.1s
    # Double Click - Decrease Colour Temperature
    - topic: $switch1b2_topic
      payload: 'DOUBLE_CLICK'
      qos: 0
      then:
        - lambda: |-
            float current_temp = id(${device_id_white}).current_values.get_color_temperature();
            auto call = id(${device_id_white}).turn_on();
            call.set_color_temperature(current_temp - 25);
            call.set_transition_length(1000); // in ms
            call.perform();
    # Switch 1 - Button 3
    # Short Click - Toggle
    - topic: $switch1b3_topic
      payload: 'SHORT_CLICK'
      qos: 0
      then:
        - light.toggle: ${device_id_rgb}
    # Hold - Brighten
    - topic: $switch1b3_topic
      payload: 'HOLD'
      qos: 0
      then:
        # Increases the brightness by 5%
        - light.dim_relative:
            id: ${device_id_rgb}
            relative_brightness: 5%
            transition_length: 0.1s
        - delay: 0.1s
    # Double Click - Increase Colour Temperature
    - topic: $switch1b3_topic
      payload: 'DOUBLE_CLICK'
      qos: 0
      then:
        - lambda: |-
            float current_temp = id(${device_id_rgb}).current_values.get_color_temperature();
            auto call = id(${device_id_rgb}).turn_on();
            call.set_color_temperature(current_temp + 25);
            call.set_transition_length(1000); // in ms
            call.perform();
    # Switch 1 - Button 4
    # Short Click - Toggle
    - topic: $switch1b4_topic
      payload: 'SHORT_CLICK'
      qos: 0
      then:
        - light.toggle: ${device_id_rgb}
    # Hold - Dim
    - topic: $switch1b4_topic
      payload: 'HOLD'
      qos: 0
      then:
        # Decreases the brightness by 5%
        - light.dim_relative:
            id: ${device_id_rgb}
            relative_brightness: -5%
            transition_length: 0.1s
        - delay: 0.1s
    # Double Click - Decrease Colour Temperature
    - topic: $switch1b4_topic
      payload: 'DOUBLE_CLICK'
      qos: 0
      then:
        - lambda: |-
            float current_temp = id(${device_id_rgb}).current_values.get_color_temperature();
            auto call = id(${device_id_rgb}).turn_on();
            call.set_color_temperature(current_temp - 25);
            call.set_transition_length(1000); // in ms
            call.perform();
   
sensor:
  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${friendly_name} Signal strength
    update_interval: 60s
    internal: true
  # Uptime Sensor
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: uptime_sensor
    update_interval: 360s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
              
# this provides for a possibility to restart from the web console or Home automation should we ever need it
button:
  - platform: restart
    id: "restart_device"
    name: "${friendly_name} Restart"
    entity_category: 'diagnostic'
  - platform: safe_mode
    id: "restart_device_safe_mode"
    name: "${friendly_name} Restart (Safe Mode)"
    entity_category: 'diagnostic'
    
text_sensor:
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP
    ssid:
      name: ${friendly_name} SSID
    bssid:
      name: ${friendly_name} BSSID
  # Expose Uptime
  - platform: template
    name: ${friendly_name} Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
         
binary_sensor:
  - platform: status
    name: "${friendly_name} Status"
  - platform: remote_receiver
    name: "On Button"
    nec:
      address: 0x00FF
      command: 0xFC03
    id: onbutton
    internal: true
    on_press:
      then:
        - lambda: |-
            if(id(last_light_on) == 1)
            {
            auto call = id(${device_id_white}).turn_on();
            call.perform();
            }
            else if (id(last_light_on) == 2)
            {
            auto call = id(${device_id_rgb}).turn_on();
            call.perform();
            }
        
  - platform: remote_receiver
    name: Off Button"
    nec:
      address: 0x00FF
      command: 0xFB04
    id: offbutton
    internal: true
    on_press:
      then:
        - lambda: |-
            if(id(last_light_on) == 1)
            {
            auto call = id(${device_id_white}).turn_off();
            call.perform();
            }
            else if (id(last_light_on) == 2)
            {
            auto call = id(${device_id_rgb}).turn_off();
            call.perform();
            }

  - platform: remote_receiver
    name: "Night Mode Button"
    nec:
      address: 0x00FF
      command: 0xF609
    id: nightmodebutton
    internal: true
    on_press:
      then:
        - lambda: |-
            auto call = id(${device_id_rgb}).turn_off();
            call.perform();
            call = id(${device_id_white}).turn_on();
            call.set_color_temperature(500); // in mireds
            call.set_brightness(0.08);
            call.set_transition_length(1000); // in ms
            call.perform();
        - delay: 0.1s

  - platform: remote_receiver
    name: "Main Light Button"
    nec:
      address: 0x00FF
      command: 0xF50A
    id: mainlightbutton
    internal: true
    on_press:
        then:
        - lambda: |-
            auto call = id(${device_id_rgb}).turn_off();
            call.perform();
            #define cwwwmode1 100mireds //Cool White
            #define cwwwmode2 300mireds //Natural White
            #define cwwwmode3 500mireds //Warm WHite
            static int cwwwmode = 1;
            call = id(${device_id_white}).turn_on();
            call.set_transition_length(1000);
            switch(cwwwmode)
            {
            case 1: call.set_color_temperature(100);
                    break;
            case 2: call.set_color_temperature(300);
                    break;
            case 3: call.set_color_temperature(500);
                    break;
            }
            cwwwmode++;
            if(cwwwmode == 4)
            {
              cwwwmode = 1;
            }
            call.perform();
            
  - platform: remote_receiver
    name: "Mood Light Button"
    nec:
      address: 0x00FF
      command: 0xF40B
    id: moodlampbutton
    internal: true
    on_press:
      then:
        - lambda: |-
            auto call = id(${device_id_white}).turn_off();
            call.perform();
            static int effect = 1;
            call = id(${device_id_rgb}).turn_on();
            call.set_transition_length(500);
            switch(effect)
            {
            case 1: call.set_effect("3 Colour Fade");
                    break;
            case 2: call.set_effect("strobe");
                    break;
            case 3: call.set_effect("My Custom Effect");
                    break;
            case 4: call.set_effect("My Custom Effect 2");
                    break;
            case 5: call.set_effect("None");
                    break;
            }
            effect++;
            if(effect == 6)
            {
              effect = 1;
            }
            call.perform();
            
  - platform: remote_receiver
    name: "RGB Colour Toggle Button"
    nec:
      address: 0x00FF
      command: 0xF30C
    id: rgbtoggle
    internal: true
    on_press:
      then:
        - lambda: |-
            auto call = id(${device_id_white}).turn_off();
            call.perform();
            static int color = 1;
            call = id(${device_id_rgb}).turn_on();
            call.set_effect("None");
            call.set_transition_length(500);
            switch(color)
            {
            case 1: call.set_rgb(1.0, 0.0, 0.0);
                    break;
            case 2: call.set_rgb(1.0, 1.0, 0.0);
                    break;
            case 3: call.set_rgb(0.0, 1.0, 0.0);
                    break;
            case 4: call.set_rgb(0.0, 1.0, 1.0);
                    break;
            case 5: call.set_rgb(0.0, 0.0, 1.0);
                    break;
            case 6: call.set_rgb(1.0, 0.0, 1.0);
                    break;
            }
            color++;
            if(color == 7)
            {
              color = 1;
            }
            call.perform();

  - platform: remote_receiver
    name: "Warm Light Button"
    nec:
      address: 0x00FF
      command: 0xF708
    id: warmbutton
    internal: true
    on_press:
      then:
        - lambda: |-
            if(id(last_light_on) == 1)
            {
            float current_temp = id(${device_id_white}).current_values.get_color_temperature();
            auto call = id(${device_id_white}).turn_on();
            call.set_color_temperature(current_temp + 25);
            call.set_transition_length(1000); // in ms
            call.perform();
            }
            else if (id(last_light_on) == 2)
            {
            float current_temp = id(${device_id_rgb}).current_values.get_color_temperature();
            auto call = id(${device_id_rgb}).turn_on();
            call.set_color_temperature(current_temp + 25);
            call.set_transition_length(1000); // in ms
            call.perform();
            }
        - delay: 0.01s

  - platform: remote_receiver
    name: "Cold Light Button"
    nec:
      address: 0x00FF
      command: 0xF807
    id: coldbutton
    internal: true
    on_press:
      then:
        - lambda: |-
            if(id(last_light_on) == 1)
            {
            float current_temp = id(${device_id_white}).current_values.get_color_temperature();
            auto call = id(${device_id_white}).turn_on();
            call.set_color_temperature(current_temp - 25);
            call.set_transition_length(1000); // in ms
            call.perform();
            }
            else if (id(last_light_on) == 2)
            {
            float current_temp = id(${device_id_rgb}).current_values.get_color_temperature();
            auto call = id(${device_id_rgb}).turn_on();
            call.set_color_temperature(current_temp - 25);
            call.set_transition_length(1000); // in ms
            call.perform();
            }
        - delay: 0.01s

  - platform: remote_receiver
    name: "Bright+ Button"
    nec:
      address: 0x00FF
      command: 0xFA05
    id: brightbutton
    internal: true
    on_press:
      then:
        - lambda: |-
            if(id(last_light_on) == 1)
            {
            float brightness;
            auto call = id(${device_id_white}).turn_on();
            id(${device_id_white}).remote_values.as_brightness( &brightness );
            brightness += 0.05f;
            if( brightness > 1.0f )
            {
              brightness = 1.0f;
            }
            call.set_brightness( brightness );
            call.perform();
            }
            else if (id(last_light_on) == 2)
            {
            float brightness;
            auto call = id(${device_id_rgb}).turn_on();
            id(${device_id_rgb}).remote_values.as_brightness( &brightness );
            brightness += 0.05f;
            if( brightness > 1.0f )
            {
              brightness = 1.0f;
            }
            call.set_brightness( brightness );
            call.perform();
            }
        - delay: 0.01s

  - platform: remote_receiver
    name: "Dim- Button"
    nec:
      address: 0x00FF
      command: 0xF906
    id: dimbutton
    internal: true
    on_press:
      then:
        - lambda: |-
            if(id(last_light_on) == 1)
            {
            float brightness;
            auto call = id(${device_id_white}).turn_on();
            id(${device_id_white}).remote_values.as_brightness( &brightness );
            brightness -= 0.05f;
            if( brightness < 0.0f )
            {
              brightness = 0.0f;
            }
            call.set_brightness( brightness );
            call.perform();
            }
            else if (id(last_light_on) == 2)
            {
            float brightness;
            auto call = id(${device_id_rgb}).turn_on();
            id(${device_id_rgb}).remote_values.as_brightness( &brightness );
            brightness -= 0.05f;
            if( brightness < 0.0f )
            {
              brightness = 0.0f;
            }
            call.set_brightness( brightness );
            call.perform();
            }
        - delay: 0.01s